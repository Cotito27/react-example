{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","newTask","setNewTask","tasks","setTasks","taskinput","useRef","addTask","name","newTasks","done","className","onSubmit","e","preventDefault","current","focus","type","onChange","target","value","ref","autoFocus","required","map","t","i","style","textDecoration","onClick","toggleDoneTask","splice","removeTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA6EeA,MApEf,WAA6B,IAAD,EACIC,mBAAiB,IADrB,mBACnBC,EADmB,KACVC,EADU,OAEAF,mBAAkB,IAFlB,mBAEnBG,EAFmB,KAEZC,EAFY,KAGpBC,EAAYC,iBAAyB,MASrCC,EAAU,SAACC,GACf,IAAMC,EAAQ,sBAAON,GAAP,CAAc,CAAEK,OAAME,MAAM,KAC1CN,EAASK,IAeX,OACE,qBAAKE,UAAU,eAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,uBAAMC,SA9BG,SAACC,GAAoB,IAAD,EACvCA,EAAEC,iBACFP,EAAQN,GACRC,EAAW,IACX,UAAAG,EAAUU,eAAV,SAAmBC,SA0BT,UACE,uBACEC,KAAK,OACLC,SAAU,SAACL,GAAD,MAAwB,KAAjBA,EAAEM,OAAOC,MAAalB,EAAWW,EAAEM,OAAOC,OAAS,IACpEA,MAAOnB,EACPU,UAAU,eACVU,IAAKhB,EACLiB,WAAS,EACTC,UAAQ,IAEV,wBAAQZ,UAAU,iCAAlB,yBAILR,EAAMqB,KAAI,SAACC,EAAUC,GAAX,OACT,sBAAKf,UAAU,sBAAf,UACE,oBAAIgB,MAAO,CAACC,eAAgBH,EAAEf,KAAO,eAAiB,IAAtD,SAA4De,EAAEjB,OAC9D,gCACE,wBAAQG,UAAU,oBAAoBkB,QAAS,kBApCtC,SAACH,GACtB,IAAMjB,EAAiB,YAAON,GAC9BM,EAASiB,GAAGhB,MAAQD,EAASiB,GAAGhB,KAChCN,EAASK,GAiCwDqB,CAAeJ,IAApE,SACGD,EAAEf,KAAO,SAAM,WAElB,wBAAQC,UAAU,iBAAiBkB,QAAS,kBAjCvC,SAACH,GAClB,IAAMjB,EAAiB,YAAON,GAC9BM,EAASsB,OAAOL,EAAG,GACnBtB,EAASK,GA8BqDuB,CAAWN,IAA7D,+BANsCA,cC7CvCO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.509cef01.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\n\ninterface ITask {\n  name: string;\n  done: boolean;\n}\n\nfunction App(): JSX.Element {\n  const [newTask, setNewTask] = useState<string>(\"\");\n  const [tasks, setTasks] = useState<ITask[]>([]);\n  const taskinput = useRef<HTMLInputElement>(null);\n\n  const handleSubmit = (e: FormElement) => {\n    e.preventDefault();\n    addTask(newTask);\n    setNewTask(\"\");\n    taskinput.current?.focus();\n  };\n\n  const addTask = (name: string): void => {\n    const newTasks = [...tasks, { name, done: false }];\n    setTasks(newTasks);\n  };\n\n  const toggleDoneTask = (i: number): void => {\n    const newTasks: ITask[] = [...tasks];\n    newTasks[i].done = !newTasks[i].done;\n    setTasks(newTasks);\n  }\n\n  const removeTask = (i: number): void => {\n    const newTasks: ITask[] = [...tasks];\n    newTasks.splice(i, 1);\n    setTasks(newTasks);\n  }\n\n  return (\n    <div className=\"continer p-4\">\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <input\n                  type=\"text\"\n                  onChange={(e) => e.target.value!=='' ? setNewTask(e.target.value) : ''}\n                  value={newTask}\n                  className=\"form-control\"\n                  ref={taskinput}\n                  autoFocus\n                  required\n                />\n                <button className=\"btn btn-success btn-block mt-2\">Save</button>\n              </form>\n            </div>\n          </div>\n          {tasks.map((t: ITask, i: number) => (\n            <div className=\"card card-body mt-2\" key={i}>\n              <h2 style={{textDecoration: t.done ? 'line-through' : ''}}>{t.name}</h2>\n              <div>\n                <button className=\"btn btn-secondary\" onClick={() => toggleDoneTask(i)}>\n                  {t.done ? 'âœ“' : 'âœ—'}\n                </button>\n                <button className=\"btn btn-danger\" onClick={() => removeTask(i)}>\n                  ðŸ—‘\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootswatch/dist/lumen/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}